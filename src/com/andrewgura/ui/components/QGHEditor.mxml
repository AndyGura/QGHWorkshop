<?xml version="1.0"?>
<components:Editor xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:components="com.andrewgura.ui.components.*"
                   addedToStage="onAddedToStage(event)">

    <fx:Script><![CDATA[
        import com.andrewgura.controllers.MainController;
        import com.andrewgura.controllers.QGHController;
        import com.andrewgura.events.DataObjectEvent;
        import com.andrewgura.vo.ProjectVO;
        import com.andrewgura.vo.QGHProjectVO;

        private var controller:QGHController;

        [Bindable]
        private var modelToView:Bitmap;
        //
        //        [Bindable]
        //        private var starlingPreviewImage:starling.display.Image;
        //
        //        [Bindable]
        //        public var fontShowTextField:starling.text.TextField;

        override public function set project(value:ProjectVO):void {
            if (super.project == value) return;
            super.project = value;
            controller = new QGHController(QGHProjectVO(project));
        }

        private function onAddedToStage(event:Event):void {
            this.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, dragEnterHandler);
            this.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, dragDropHandler);
            addEventListener("renameModel", onRenameModel);
        }

        protected function addItemClickHandler(event:MouseEvent):void {
            MainController.importFiles();
        }

        protected function deleteItemClickHandler(event:MouseEvent):void {
            var items:Array = [];
            for each (var e:Object in list.selectedItems) {
                items.push(e);
            }
            controller.deleteItems(items);
        }

        protected function dragDropHandler(event:NativeDragEvent):void {
            var dropFiles:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
            MainController.importSelectedFiles(dropFiles);
        }


        protected function dragEnterHandler(event:NativeDragEvent):void {
            NativeDragManager.acceptDragDrop(this);
        }

        //
        //        private function updateBitmapToView(...bindings):Object {
        //            if (!project || !list || !list.selectedItem || !list.dataProvider || !(list.selectedItem is TextureVO) || list.dataProvider != QGHProjectVO(project).imageCollection) {
        //        modelToView
        //                starlingPreviewImage = null;
        //                return null;
        //            }
        //        modelToView
        //            var texture:Texture = Texture.fromAtfData(TextureVO(list.selectedItem).atfData);
        //            starlingPreviewImage = new starling.display.Image(texture);
        //
        //            var tabs:Array = [bitmapTabItem, atfTabItem];
        //            if (list.selectedItem is TextureFontVO) {
        //                tabs.push(fontTabItem);
        //                fontShowTextField = new starling.text.TextField(500, 500, "The quick brown fox jumps over the lazy dog.", TextureVO(list.selectedItem).name, 32, 0xffffff);
        //            }
        //            viewModeTabBar.dataProvider = new ArrayCollection(tabs);
        //
        //            return null;
        //        }

        private function onExportQghClick(event:MouseEvent):void {
            controller.exportQGH();
        }

        //
        //        private function onExportPngClick(event:MouseEvent):void {
        //            controller.exportPicture(TextureVO(list.selectedItem).name);
        //        }
        //
        //        private function onCreateFontClick(event:MouseEvent):void {
        //            controller.createFont(TextureVO(list.selectedItem));
        //        }
        //
        //        private function onImportFontXmlClick(event:MouseEvent):void {
        //            controller.importFontXml(TextureFontVO(list.selectedItem));
        //        }

        private function onRenameModel(event:DataObjectEvent):void {
            var newName:String = controller.getNewNameForDuplicate(event.data.newName, QGHProjectVO(project).modelsCollection.getItemIndex(event.data.texture));
            event.data.model.name = newName;
        }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <!--<fx:Object>-->
        <!--{-->
        <!--import com.andrewgura.vo.QGHProjectVO; updateBitmapToView(project, QGHProjectVO(project).imageCollection,-->
        <!--TextureVO(list.selectedItem).sourceBitmap)}-->
        <!--</fx:Object>-->
        <!--<fx:Object name="Source" id="bitmapTabItem"/>-->
        <!--<fx:Object name="ATF" id="atfTabItem"/>-->
        <!--<fx:Object name="Font" id="fontTabItem"/>-->
    </fx:Declarations>

    <s:HGroup width="100%" height="100%"
              visible="{project}">
        <s:VGroup height="100%">
            <s:List id="list" dataProvider="{QGHProjectVO(project).modelsCollection}"
                    allowMultipleSelection="true"
                    itemRenderer="com.andrewgura.ui.itemRenderers.ModelListItemRenderer"
                    width="400" height="100%"/>
            <s:HGroup width="100%" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
                <s:Button label="Add" click="addItemClickHandler(event)"/>
                <s:Button label="Delete" click="deleteItemClickHandler(event)"/>
                <s:Spacer width="100%"/>
                <s:Button label="EXPORT QGH" click="onExportQghClick(event)"/>
            </s:HGroup>
        </s:VGroup>
        <s:VGroup width="100%" height="100%" gap="-1">
            <s:TabBar id="viewModeTabBar"
                      width="100%" labelField="name"/>
            <s:Group width="100%" height="100%">
                <s:Rect width="100%" height="100%">
                    <s:stroke>
                        <s:SolidColorStroke color="{getStyle('borderColor')}"/>
                    </s:stroke>
                </s:Rect>
            </s:Group>
            <s:HGroup width="100%" verticalAlign="middle" visible="{modelToView}" includeInLayout="{modelToView}">
                <!-- info about selected model -->
            </s:HGroup>
        </s:VGroup>
    </s:HGroup>


    <s:Label text="Welcome to QGHWorkshop.{'\n'}Create new project or open an existing one"
             horizontalCenter="0" verticalCenter="0"
             lineBreak="explicit" textAlign="center"
             visible="{!project}"/>

</components:Editor>
