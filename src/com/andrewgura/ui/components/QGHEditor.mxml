<?xml version="1.0"?>
<components:Editor xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:components="com.andrewgura.ui.components.*"
                   xmlns:stagecomponentswrapper="com.andrewgura.stageComponentsWrapper.*"
                   xmlns:editor="com.andrewgura.ui.components.editor.*"
                   addedToStage="onAddedToStage(event)">

    <fx:Script><![CDATA[
        import away3d.containers.Scene3D;

        import com.andrewgura.controllers.MainController;
        import com.andrewgura.controllers.QGHController;
        import com.andrewgura.controllers.TCAController;
        import com.andrewgura.events.DataObjectEvent;
        import com.andrewgura.ui.itemRenderers.ModelListItemRenderer;
        import com.andrewgura.ui.itemRenderers.TcaListItemRenderer;
        import com.andrewgura.ui.itemRenderers.TextureListItemRenderer;
        import com.andrewgura.vo.ModelVO;
        import com.andrewgura.vo.ProjectVO;
        import com.andrewgura.vo.QGHProjectVO;
        import com.andrewgura.vo.TCAProjectVO;

        import mx.events.CollectionEvent;

        import spark.components.supportClasses.ItemRenderer;

        import starling.display.Image;

        [Bindable]
        private var controller:QGHController;
        [Bindable]
        private var tcaController:TCAController;

        [Bindable]
        private var bitmapToView:Bitmap;
        [Bindable]
        private var starlingPreviewImage:Image;
        [Bindable]
        private var viewScene:Scene3D = new Scene3D();
        [Bindable]
        private var selectedTexture:com.andrewgura.vo.TextureVO;

        override public function set project(value:ProjectVO):void {
            if (super.project == value) return;
            if (project) {
                project.removeEventListener(QGHProjectVO.ATTACHED_TEXTURES_CHANGE, onTexturesChange);
            }
            super.project = value;
            if (project) {
                project.addEventListener(QGHProjectVO.ATTACHED_TEXTURES_CHANGE, onTexturesChange);
            }
            controller = new QGHController(QGHProjectVO(project));
            if (QGHProjectVO(project).attachedTCA) {
                tcaController = new TCAController(QGHProjectVO(project).attachedTCA);
            }
        }

        private function onAddedToStage(event:Event):void {
            this.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, dragEnterHandler);
            this.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, dragDropHandler);
            addEventListener("renameModel", onRenameModel);
        }

        protected function attachTcaClickHandler(event:Event):void {
            var tca:TCAProjectVO = list.selectedItem;
            if (!QGHProjectVO(project).attachedTCA) {
                QGHProjectVO(project).attachedTCA = new TCAProjectVO();
                tcaController = new TCAController(QGHProjectVO(project).attachedTCA);
            }
            QGHProjectVO(project).attachedTCA.imageCollection.addAll(tca.imageCollection);
            QGHProjectVO(project).contentCollection.removeItem(tca);
        }

        private function onTexturesChange(event:CollectionEvent):void {
            controller.applyMaterials();
        }

        protected function addItemClickHandler(event:MouseEvent):void {
            MainController.importFiles();
        }

        protected function deleteItemClickHandler(event:MouseEvent):void {
            var items:Array = [];
            for each (var e:Object in list.selectedItems) {
                items.push(e);
            }
            controller.deleteItems(items);
        }

        protected function dragDropHandler(event:NativeDragEvent):void {
            var dropFiles:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
            MainController.importSelectedFiles(dropFiles);
        }


        protected function dragEnterHandler(event:NativeDragEvent):void {
            NativeDragManager.acceptDragDrop(this);
        }


        private function updateViewScene(...bindings):Object {
            if (!project || !list || !list.selectedItem || !list.dataProvider || !(list.selectedItem is ModelVO) || list.dataProvider != QGHProjectVO(project).contentCollection) {
                if (viewScene.numChildren > 0) {
                    viewScene.removeChildAt(0);
                    awaydSceneComponent.invalidateDisplayList();
                }
                return null;
            }
            if (viewScene.numChildren > 0 && viewScene.getChildAt(0) != ModelVO(list.selectedItem).mesh) {
                viewScene.removeChildAt(0);
                awaydSceneComponent.invalidateDisplayList();
            }
            if (viewScene.numChildren == 0) {
                viewScene.addChild(ModelVO(list.selectedItem).mesh);
                awaydSceneComponent.invalidateDisplayList();
            }
            return null;
        }

        private function onExportQghClick(event:MouseEvent):void {
            controller.exportQGH();
        }

        //
        //        private function onExportPngClick(event:MouseEvent):void {
        //            controller.exportPicture(TextureVO(list.selectedItem).name);
        //        }
        //
        //        private function onCreateFontClick(event:MouseEvent):void {
        //            controller.createFont(TextureVO(list.selectedItem));
        //        }
        //
        //        private function onImportFontXmlClick(event:MouseEvent):void {
        //            controller.importFontXml(TextureFontVO(list.selectedItem));
        //        }

        private function onRenameModel(event:DataObjectEvent):void {
            var newName:String = controller.getNewNameForDuplicate(event.data.newName, QGHProjectVO(project).contentCollection.getItemIndex(event.data.texture));
            event.data.model.name = newName;
        }

        private function listItemRendererFunction(item:Object):IFactory {
            if (item is ModelVO) {
                return new ClassFactory(ModelListItemRenderer);
            } else if (item is TCAProjectVO) {
                return new ClassFactory(TcaListItemRenderer);
            } else if (item is com.andrewgura.vo.TextureVO) {
                return new ClassFactory(TextureListItemRenderer);
            } else {
                return new ClassFactory(ItemRenderer);
            }
        }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <fx:Object>{updateViewScene(project, QGHProjectVO(project).contentCollection, (list.selectedItem is ModelVO ?
            ModelVO(list.selectedItem).mesh : null))}
        </fx:Object>
        <s:ArrayCollection id="listTabBarCollection">
            <fx:Object name="Models" id="modelsTabItem"/>
            <fx:Object name="Textures" id="texturesTabItem"/>
        </s:ArrayCollection>
    </fx:Declarations>

    <s:HGroup width="100%" height="100%"
              visible="{project}">
        <s:VGroup height="100%">
            <s:TabBar id="listTabBar" width="100%"
                      labelField="name" dataProvider="{listTabBarCollection}"/>
            <s:Group width="100%" height="100%">
                <s:VGroup width="100%" height="100%"
                          visible="{listTabBar.selectedItem == modelsTabItem}">
                    <s:List id="list" dataProvider="{QGHProjectVO(project).contentCollection}"
                            allowMultipleSelection="true"
                            itemRendererFunction="listItemRendererFunction"
                            width="400" height="100%" selectedIndex="0"/>
                    <s:HGroup width="100%" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
                        <s:Button label="Attach TCA"
                                  visible="{list.selectedItem is TCAProjectVO}"
                                  includeInLayout="{list.selectedItem is TCAProjectVO}"
                                  click="attachTcaClickHandler(event)"/>
                        <s:Button label="Add" click="addItemClickHandler(event)"/>
                        <s:Button label="Delete" click="deleteItemClickHandler(event)"/>
                        <s:Spacer width="100%"/>
                        <s:Button label="EXPORT QGH" click="onExportQghClick(event)"/>
                    </s:HGroup>
                </s:VGroup>
                <s:VGroup width="100%" height="100%"
                          visible="{listTabBar.selectedItem == texturesTabItem}">
                    <editor:TCAListControl id="tcaControl" width="400" height="100%"
                                           project="{QGHProjectVO(project).attachedTCA}" selectedTexture="@{selectedTexture}"
                                           tcaController="{tcaController}"/>
                </s:VGroup>
            </s:Group>
        </s:VGroup>
        <s:VGroup width="100%" height="100%" gap="-1"
                  visible="{listTabBar.selectedItem == texturesTabItem}"
                  includeInLayout="{listTabBar.selectedItem == texturesTabItem}">
            <editor:TextureViewer width="100%" height="100%"
                                  texture="{selectedTexture}"/>
            <editor:TCAImageControl width="100%" texture="{selectedTexture}"
                                    tcaController="{tcaController}"/>
        </s:VGroup>
        <editor:TCAEditor width="100%" height="100%"
                          project="{list.selectedItem as TCAProjectVO}"
                          visible="{list.selectedItem is TCAProjectVO &amp;&amp; listTabBar.selectedItem == modelsTabItem}"
                          includeInLayout="{list.selectedItem is TCAProjectVO &amp;&amp; listTabBar.selectedItem == modelsTabItem}"/>
        <s:VGroup width="100%" height="100%" gap="-1"
                  visible="{viewScene &amp;&amp; list.selectedItem &amp;&amp; list.selectedItem is ModelVO &amp;&amp; listTabBar.selectedItem == modelsTabItem}"
                  includeInLayout="{viewScene &amp;&amp; list.selectedItem &amp;&amp; list.selectedItem is ModelVO &amp;&amp; listTabBar.selectedItem == modelsTabItem}">
            <s:Group width="100%" height="100%">
                <stagecomponentswrapper:AwaydSceneComponent top="1" left="1" right="1" bottom="1"
                                                            scene="{viewScene}" id="awaydSceneComponent"
                                                            width="100%" height="100%"/>
                <s:Rect width="100%" height="100%">
                    <s:stroke>
                        <s:SolidColorStroke color="{getStyle('borderColor')}"/>
                    </s:stroke>
                </s:Rect>
            </s:Group>
            <s:HGroup width="100%" verticalAlign="middle">
                <!-- info about selected model -->
            </s:HGroup>
        </s:VGroup>
    </s:HGroup>


    <s:Label text="Welcome to QGHWorkshop.{'\n'}Create new project or open an existing one"
             horizontalCenter="0" verticalCenter="0"
             lineBreak="explicit" textAlign="center"
             visible="{!project}"/>

</components:Editor>
